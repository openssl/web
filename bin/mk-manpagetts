#! /usr/bin/perl

package Local::MkManPages;

use strict;
use warnings;
use File::Basename qw(basename);
use File::Spec ();
use Getopt::Long qw(GetOptionsFromArray);
use Pod::Usage qw(pod2usage);
use Pod::Simple::XHTML;

__PACKAGE__->run(@ARGV);

sub Dirs        { return (qw(apps crypto ssl
                             man1 man3 man5 man7)) }
sub Dir2Section { return ( apps => "man1", crypto => "man3", ssl => "man3" ) }

sub run {
    my ( $class, @argv ) = @_;
    my $opt = $class->process_options(@argv);
    exit $class->main( $opt->{SrcDir}, $opt->{WwwDir}, $opt->{RelVer} );
}

sub main {
    my ( $class, $srcdir, $wwwdir, $release ) = @_;

    foreach my $subdir ( $class->Dirs ) {
        my $dir = File::Spec->catfile( $srcdir, $subdir );
        if ( opendir( my $dh, $dir ) ) {
            while ( my $ent = readdir($dh) ) {
                next if $ent =~ /^\./;
                next if $ent !~ /\.pod$/;

                my $origbase = basename( $ent, ".pod" );
                my $title = $origbase;
                my $tmp_sect = { $class->Dir2Section }->{$subdir} // $subdir;
                (my $tmp_sectnum = $tmp_sect) =~ s|^man||;
                # In addition to what getdata() gives us, we add a few
                # defaults of our own:
                #
                #       release => "..."        # 
                #       subdir  => "..."        # The original subdir
                #       sectnum => n            # Default section number
                #
                my %data = (
                    subdir   => $subdir,
                    sect     => $tmp_sect,
                    sectnum  => $tmp_sectnum,
                    $class->getdata( File::Spec->catfile ( $dir, $ent ) )
                );
                # These are for display
                my $podfile = File::Spec->catfile( $subdir, $ent );
                my $incfile = File::Spec->catfile( "man$data{sectnum}",
                                                   "$origbase.inc" );
                # These are files we're actually manipulating
                my $inpod = File::Spec->catfile( $srcdir, $podfile );
                my $outinc = File::Spec->catfile( $wwwdir, $incfile );

                # Get main HTML output
                my $out = $class->geninc( $release, $inpod, %data );
                open( my $fh, ">", $outinc )
                    or $class->die("Can't open $outinc: $!");
                print $fh $out or $class->die("Can't print $outinc: $!");
                close($fh) or $class->die("Can't close $outinc: $!");

                my @mdttnames =
                    map { (my $x = $_) =~ s|/|-|g; $x } @{$data{names}};
                # Older OpenSSL pods have file names that do not correspond
                # to any of the names in the NAME section.
                # Strictly speaking, we shouldn't use that name, but HTML
                # pages with that name have been produced in the past, so
                # we keep doing so as long as it's relevant.
                if (! grep { $_ eq $origbase } @mdttnames) {
                    push @mdttnames, $origbase;
                }
                foreach my $mdttname (@mdttnames) {
                    my $mdttfile = File::Spec->catdir( "man$data{sectnum}",
                                                       "$mdttname.md.tt" );
                    my $outmdtt = File::Spec->catfile( $wwwdir, $mdttfile );
                    $out = $class->genmdtt( $release, $title, $origbase,
                                            $mdttname, %data );
                    open( $fh, ">", $outmdtt )
                        or $class->die("Can't open $outmdtt: $!");
                    print $fh $out or $class->die("Can't print $outmdtt: $!");
                    close($fh) or $class->die("Can't close $outmdtt: $!");
                }
            }
        }
    }
}

# Generate manpage markdown template wrapper
sub genmdtt {
    my ( $class, $release, $title, $origbase, $mdttbase, %data ) = @_;
    # Note that the .inc file is pure HTML.
    # That's OK, markdown can include HTML, by definition.
    return <<EOH;
---
OSSL-original-subdir: $data{subdir}
OSSL-subdir: man$data{sectnum}
OSSL-section: $data{sectnum}
OSSL-description: "$data{description}"
breadcrumb: $mdttbase
[% INCLUDE "$mdttbase.cross" %]
---
## $title

[% INCLUDE "$origbase.inc" %]
EOH
}

# Generate manpage content
sub geninc {
    my ( $class, $release, $filename, %data ) = @_;

    open( my $fh, $filename ) or $class->die("Can't open $filename: $!");
    my $infile = do { local $/; <$fh>; };
    close( $fh );

    my $out;
    my $pod = Pod::Simple::XHTML->new;
    $pod->html_h_level(3);
    $pod->perldoc_url_prefix("/docs/man$release/man$data{sectnum}/");
    $pod->perldoc_url_postfix(".html");
    $pod->man_url_prefix("/docs/man$release/man");
    $pod->man_url_postfix(".html");
    $pod->html_header('');
    $pod->html_footer('');
    $pod->output_string( \$out );
    $pod->parse_string_document($infile);
    return $out;
}

# Return diverse data from a manpage if available, currently:
# {
#    names       => [ ... ]             # list of all OTHER names
#    description => "text"              # the short description from NAME
#    section     => n                   # the section number
# }
sub getdata {
    my ( $class, $infile ) = @_;
    my %data = ();
    open( my $fh, "<", $infile ) or $class->die("Can't open $infile: $!");
    {
        local $/ = "";
        my $foundname = 0;
        while (<$fh>) {
            chop;
            s/\n/ /gm;
            if (/^=for (?:comment|openssl) openssl_manual_section:\s*(\d+)/) {
                $data{sectnum} = "$1";
            }
            elsif (/^=head1\s/) {
                $foundname = 0;
            }
            elsif ($foundname) {
                if (/ - /) {
                    $data{description} = $';
                    $_ = $`;
                    s/,\s+/,/g;
                    s/\s+,/,/g;
                    s/^\s+//g;
                    s/\s+$//g;
                    s/\s/_/g;
                    push @{$data{names}}, split ',';
                }
            }
            if (/^=head1\s+NAME\s*$/) {
                $foundname = 1;
            }
        }
    }
    return %data;
}

sub die {
    my $class = shift;
    $class->error(@_);
    exit(2);
}

sub error {
    my $class = shift;
    my $prog  = basename($0);
    warn("$prog: $_\n") for @_;
}

sub process_options {
    my ( $class, @argv ) = @_;
    my %opt;

    GetOptionsFromArray( \@argv, \%opt, "help", "man" )
      or pod2usage( -verbose => 0 );

    pod2usage( -verbose => 1 ) if ( $opt{help} or @argv != 3 );
    pod2usage( -verbose => 2 ) if ( $opt{man} );

    # <src/dir> <rel.ver> <www/dir>
    my @argkeys = qw(SrcDir RelVer WwwDir);
    @opt{@argkeys} = @argv;

    # no empty values, directories must exist
    my @err;
    foreach my $key (@argkeys) {
        push( @err, "Invalid $key argument '$opt{$key}'" )
          if ( $opt{$key} =~ /^\s*$/ );
        push( @err, "Directory '$opt{$key}': $!" )
          if ( $key =~ /Dir$/ and !-d $opt{$key} );
    }
    $class->die(@err) if @err;

    # each source dir has a set of subdirs with documentation
    my @found_dirs = ();
    my $docdir = File::Spec->catfile( $opt{SrcDir} );
    foreach my $subdir ( $class->Dirs ) {
        my $dir = File::Spec->catfile( $docdir, $subdir );
        push @found_dirs, $dir if -d $dir;
    }
    push( @err, "No documentation directories in $docdir" )
        unless ( @found_dirs );

    return \%opt;
}

__END__

=pod

=head1 NAME

mk-manpagetts - man pages from POD into markdown/html templates

=head1 SYNOPSIS

 mk-manpagetts [options] <SrcDir> <RelVer> <WwwDir>

  <SrcDir>   doc directory of release <RelVer>, example 'OpenSSL_1_0_2-stable/doc'
  <RelVer>   version number associated with <SrcDir>, example '1.0.2'
  <WwwDir>   top level directory beneath which generated template is stored,
             example 'web'

    --help    display a brief help message
    --man     display full documentation

This script is only useful with pre-3.0 OpenSSL.  For OpenSSL 3.0 and on,
please use mk-manpagetts3.

=head1 DESCRIPTION

This utility is run on a web server generate the markdown/html template version
of OpenSSL documentation from the original POD.  The resultant directory
structure may look something like the following (where the contents of
index.html do not come from this tool):

 $ ls some/path/to/web
 man1.0.2    man1.1.0    manmaster
 $ ls some/path/to/web/man1.0.2
 index.html  man1        man3        man5        man7
 $ ls some/path/to/web/man1.0.2/apps
 CA.pl.md.tt
 asn1parse.md.tt
 c_rehash.md.tt
 ...

The result needs further processing by other tools.  Among others, the .md.tt
files rely on the presence of a corresponding .cross file, which is usually
produced later, when all .md.tt files are in place.  To finish everything off,
the .md.tt files need to be passed through C<tpage>, and the resulting markdown
must be converted into pure html with a well chosen tool.

=cut
